{"version":3,"sources":["components/TodoList/typings/index.ts","components/TodoList/Input/index.tsx","components/TodoList/List/Item.tsx","components/TodoList/List/index.tsx","components/TodoList/reducer.ts","components/TodoList/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ACTION_TYPE","TdInput","addTodo","inputRef","todoList","useRef","className","type","placeholder","ref","onClick","val","current","value","trim","length","id","Date","getTime","content","completed","TdItem","todo","toggleTodo","removeTodo","checked","onChange","style","textDecoration","TdList","map","todoReducer","state","action","payload","INIT_TODOLIST","ADD_TODO","REMOVE_TODO","filter","TOGGLE_TODO","init","initTodoList","localStorageTitle","TodoList","useReducer","dispatch","useEffect","console","log","JSON","parse","localStorage","getItem","setItem","stringify","useCallback","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a3bfefc.chunk.js","sourcesContent":["export interface ITodo {\r\n  id: number\r\n  content: string\r\n  completed: boolean\r\n}\r\n\r\nexport interface IState {\r\n  todoList: ITodo[]\r\n}\r\n\r\nexport interface IAction {\r\n  type: ACTION_TYPE\r\n  payload: ITodo[] | ITodo | number\r\n}\r\n\r\nexport enum ACTION_TYPE {\r\n  ADD_TODO = 'addTodo',\r\n  REMOVE_TODO = 'removeTodo',\r\n  TOGGLE_TODO = 'toggleTodo',\r\n  // 初始化\r\n  INIT_TODOLIST = 'initTodoList'\r\n}\r\n","import React, { FC, useRef, ReactElement } from 'react'\r\nimport { ITodo } from '../typings'\r\n\r\ninterface IProps {\r\n  addTodo: (todo: ITodo) => void\r\n  todoList: ITodo[]\r\n}\r\n\r\nconst TdInput: FC<IProps> = ({ addTodo, todoList }): ReactElement => {\r\n  const inputRef = useRef<HTMLInputElement>(null)\r\n\r\n  const addItem = (): void => {\r\n    const val: string = inputRef.current!.value.trim()\r\n    if (val.length) {\r\n      // const isExist = todoList.find((todo) => todo.content === val)\r\n      // if (isExist) {\r\n      //   alert('已经存在')\r\n      //   return\r\n      // }\r\n      addTodo({\r\n        id: new Date().getTime(),\r\n        content: val,\r\n        completed: false\r\n      })\r\n      inputRef.current!.value = ''\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"todo-input\">\r\n      <input type=\"text\" placeholder=\"请输入待办事项\" ref={inputRef} />\r\n      <button onClick={addItem}>增加</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TdInput\r\n","import React, { FC, ReactElement } from 'react'\r\nimport { ITodo } from '../typings'\r\n\r\ninterface IProps {\r\n  todo: ITodo\r\n  toggleTodo: (id: number) => void\r\n  removeTodo: (id: number) => void\r\n}\r\n\r\nconst TdItem: FC<IProps> = ({ todo, toggleTodo, removeTodo }): ReactElement => {\r\n  const { id, content, completed } = todo\r\n\r\n  return (\r\n    <div className=\"todo-item\">\r\n      <input type=\"checkbox\" checked={completed} onChange={() => toggleTodo(id)} />\r\n      <span style={{ textDecoration: completed ? 'line-through' : 'none' }}>{content}</span>\r\n      <button onClick={() => removeTodo(id)}>删除</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { TdItem }\r\n","// import React from 'react';\r\n\r\nimport { FC, ReactElement } from 'react'\r\nimport { ITodo } from '../typings'\r\n\r\nimport { TdItem } from './Item'\r\n\r\ninterface IProps {\r\n  todoList: ITodo[]\r\n  toggleTodo: (id: number) => void\r\n  removeTodo: (id: number) => void\r\n}\r\n\r\nconst TdList: FC<IProps> = ({ todoList, toggleTodo, removeTodo }): ReactElement => {\r\n  return (\r\n    <div className=\"td-list\">\r\n      {todoList &&\r\n        todoList.map((todo: ITodo) => {\r\n          return <TdItem key={todo.id} todo={todo} toggleTodo={toggleTodo} removeTodo={removeTodo} />\r\n        })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TdList\r\n","import { ACTION_TYPE, IAction, IState, ITodo } from './typings'\r\n\r\nfunction todoReducer(state: IState, action: IAction): IState {\r\n  const { type, payload } = action\r\n  switch (type) {\r\n    case ACTION_TYPE.INIT_TODOLIST:\r\n      return {\r\n        ...state,\r\n        todoList: payload as ITodo[]\r\n      }\r\n    // 新增\r\n    case ACTION_TYPE.ADD_TODO:\r\n      return {\r\n        ...state,\r\n        todoList: [...state.todoList, payload as ITodo]\r\n      }\r\n    // 删除\r\n    case ACTION_TYPE.REMOVE_TODO:\r\n      return {\r\n        ...state,\r\n        todoList: state.todoList.filter((todo) => todo.id !== payload)\r\n      }\r\n    // 修改状态\r\n    case ACTION_TYPE.TOGGLE_TODO:\r\n      return {\r\n        ...state,\r\n        todoList: state.todoList.map((todo) => {\r\n          return todo.id === payload\r\n            ? {\r\n                ...todo,\r\n                completed: !todo.completed\r\n              }\r\n            : todo\r\n        })\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport { todoReducer }\r\n","import React, { FC, ReactElement, useCallback, useEffect, useReducer } from 'react'\r\nimport TdInput from './Input'\r\nimport TdList from './List'\r\nimport { todoReducer } from './reducer'\r\nimport { ACTION_TYPE, IState, ITodo } from './typings'\r\n\r\n// const initialState: IState = {\r\n//   todoList: []\r\n// }\r\n\r\n// 惰性初始化\r\nfunction init(initTodoList: ITodo[]): IState {\r\n  return {\r\n    todoList: initTodoList\r\n  }\r\n}\r\n\r\nconst localStorageTitle = 'ts+hooks开发todoList测试'\r\n\r\nconst TodoList: FC = (): ReactElement => {\r\n  // useState\r\n  // const [todoList, setTodoList] = useState<Itodo[]>([])\r\n\r\n  // useReducer\r\n  const [state, dispatch] = useReducer(todoReducer, [], init)\r\n\r\n  useEffect(() => {\r\n    console.log(123)\r\n    const todoList = JSON.parse(localStorage.getItem(localStorageTitle) || '[]')\r\n    dispatch({\r\n      type: ACTION_TYPE.INIT_TODOLIST,\r\n      payload: todoList\r\n    })\r\n  }, [])\r\n\r\n  //\r\n  useEffect(() => {\r\n    console.log('abc')\r\n    localStorage.setItem(localStorageTitle, JSON.stringify(state.todoList))\r\n  }, [state.todoList])\r\n\r\n  const addTodo = useCallback((todo: ITodo): void => {\r\n    // setTodoList((todoList) => [...todoList, todo])\r\n    dispatch({\r\n      type: ACTION_TYPE.ADD_TODO,\r\n      payload: todo\r\n    })\r\n  }, [])\r\n\r\n  const removeTodo = useCallback((id: number): void => {\r\n    dispatch({\r\n      type: ACTION_TYPE.REMOVE_TODO,\r\n      payload: id\r\n    })\r\n  }, [])\r\n\r\n  const toggleTodo = useCallback((id: number): void => {\r\n    dispatch({\r\n      type: ACTION_TYPE.TOGGLE_TODO,\r\n      payload: id\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"todo-list\">\r\n      <TdInput todoList={state.todoList} addTodo={addTodo} />\r\n      <TdList todoList={state.todoList} removeTodo={removeTodo} toggleTodo={toggleTodo} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react'\nimport TodoList from './components/TodoList'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}